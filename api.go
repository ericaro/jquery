package jquery
//this file is generated by jquery/gen : Do not edit use go generate instead

import "github.com/gopherjs/gopherjs/js"

var (
	JQ = js.Global.Get("jQuery")
	BrowserVersion = js.Global.Get("jQuery.browser.version")
	FxInterval = js.Global.Get("jQuery.fx.interval")
	FxOff = js.Global.Get("jQuery.fx.off")
	)

	
// Data Store arbitrary data associated with the specified element. Returns the value that was set. OR Returns value at named data store for the element, as set by , or the full data store for the element.
//
// see http://api.jquery.com/jQuery.data
//
func Data(i ...interface{}) *js.Object  {
	j:= JQ.Call("data", i...)
	return j
}


// FnExtend Merge the contents of an object onto the jQuery prototype to provide new jQuery instance methods.
//
// see http://api.jquery.com/jQuery.FnExtend
//
func FnExtend(i ...interface{}) *js.Object  {
	j:= JQ.Call("FnExtend", i...)
	return j
}


// Type Determine the internal JavaScript [[Class]] of an object.
//
// see http://api.jquery.com/jQuery.type
//
func Type(i ...interface{}) string  {
	j:= JQ.Call("type", i...)
	return j.String()
}


// Sub Creates a new copy of jQuery whose properties and methods can be modified without affecting the original jQuery object.
//
// see http://api.jquery.com/jQuery.sub
//
func Sub(i ...interface{}) JQuery  {
	j:= JQ.Call("sub", i...)
	return newJQuery(j)
}


// ParseXML Parses a string into an XML document.
//
// see http://api.jquery.com/jQuery.parseXML
//
func ParseXML(i ...interface{}) *js.Object  {
	j:= JQ.Call("parseXML", i...)
	return j
}


// Trim Remove the whitespace from the beginning and end of a string.
//
// see http://api.jquery.com/jQuery.trim
//
func Trim(i ...interface{}) string  {
	j:= JQ.Call("trim", i...)
	return j.String()
}


// Extend Merge the contents of two or more objects together into the first object.
//
// see http://api.jquery.com/jQuery.extend
//
func Extend(i ...interface{}) *js.Object  {
	j:= JQ.Call("extend", i...)
	return j
}


// Dequeue Execute the next function on the queue for the matched element.
//
// see http://api.jquery.com/jQuery.dequeue
//
func Dequeue(i ...interface{}) {	JQ.Call("dequeue", i...) }


// IsArray Determine whether the argument is an array.
//
// see http://api.jquery.com/jQuery.isArray
//
func IsArray(i ...interface{}) bool  {
	j:= JQ.Call("isArray", i...)
	return j.Bool()
}


// Unique Sorts an array of DOM elements, in place, with the duplicates removed. Note that this only works on arrays of DOM elements, not strings or numbers.
//
// see http://api.jquery.com/jQuery.unique
//
func Unique(i ...interface{}) *js.Object  {
	j:= JQ.Call("unique", i...)
	return j
}


// InArray Search for a specified value within an array and return its index (or -1 if not found).
//
// see http://api.jquery.com/jQuery.inArray
//
func InArray(i ...interface{}) float64  {
	j:= JQ.Call("inArray", i...)
	return j.Float()
}


// Now Return a number representing the current time.
//
// see http://api.jquery.com/jQuery.now
//
func Now(i ...interface{}) float64  {
	j:= JQ.Call("now", i...)
	return j.Float()
}


// Get Load data from the server using a HTTP GET request.
//
// see http://api.jquery.com/jQuery.get
//
func Get(i ...interface{}) *js.Object  {
	j:= JQ.Call("get", i...)
	return j
}


// NewCallbacks A multi-purpose callbacks list object that provides a powerful way to manage callback lists.
//
// see http://api.jquery.com/NewCallbacks
//
func NewCallbacks(i ...interface{}) Callbacks  {
	j:= JQ.Call("NewCallbacks", i...)
	return newCallbacks(j)
}


// Proxy Takes a function and returns a new one that will always have a particular context.
//
// see http://api.jquery.com/jQuery.proxy
//
func Proxy(i ...interface{}) *js.Object  {
	j:= JQ.Call("proxy", i...)
	return j
}


// GetScript Load a JavaScript file from the server using a GET HTTP request, then execute it.
//
// see http://api.jquery.com/jQuery.getScript
//
func GetScript(i ...interface{}) *js.Object  {
	j:= JQ.Call("getScript", i...)
	return j
}


// MakeArray Convert an array-like object into a true JavaScript array.
//
// see http://api.jquery.com/jQuery.makeArray
//
func MakeArray(i ...interface{}) *js.Object  {
	j:= JQ.Call("makeArray", i...)
	return j
}


// IsNumeric Determines whether its argument is a number.
//
// see http://api.jquery.com/jQuery.isNumeric
//
func IsNumeric(i ...interface{}) bool  {
	j:= JQ.Call("isNumeric", i...)
	return j.Bool()
}


// GlobalEval Execute some JavaScript code globally.
//
// see http://api.jquery.com/jQuery.globalEval
//
func GlobalEval(i ...interface{}) {	JQ.Call("globalEval", i...) }


// Queue Show the queue of functions to be executed on the matched element. OR Manipulate the queue of functions to be executed on the matched element.
//
// see http://api.jquery.com/jQuery.queue
//
func Queue(i ...interface{}) *js.Object  {
	j:= JQ.Call("queue", i...)
	return j
}


// AjaxTransport Creates an object that handles the actual transmission of Ajax data.
//
// see http://api.jquery.com/jQuery.ajaxTransport
//
func AjaxTransport(i ...interface{}) {	JQ.Call("ajaxTransport", i...) }


// GetJSON Load JSON-encoded data from the server using a GET HTTP request.
//
// see http://api.jquery.com/jQuery.getJSON
//
func GetJSON(i ...interface{}) *js.Object  {
	j:= JQ.Call("getJSON", i...)
	return j
}


// IsEmptyObject Check to see if an object is empty (contains no enumerable properties).
//
// see http://api.jquery.com/jQuery.isEmptyObject
//
func IsEmptyObject(i ...interface{}) bool  {
	j:= JQ.Call("isEmptyObject", i...)
	return j.Bool()
}


// IsWindow Determine whether the argument is a window.
//
// see http://api.jquery.com/jQuery.isWindow
//
func IsWindow(i ...interface{}) bool  {
	j:= JQ.Call("isWindow", i...)
	return j.Bool()
}


// IsFunction Determine if the argument passed is a Javascript function object. 
//
// see http://api.jquery.com/jQuery.isFunction
//
func IsFunction(i ...interface{}) bool  {
	j:= JQ.Call("isFunction", i...)
	return j.Bool()
}


// RemoveData Remove a previously-stored piece of data.
//
// see http://api.jquery.com/jQuery.removeData
//
func RemoveData(i ...interface{}) JQuery  {
	j:= JQ.Call("removeData", i...)
	return newJQuery(j)
}


// Error Takes a string and throws an exception containing it.
//
// see http://api.jquery.com/jQuery.error
//
func Error(i ...interface{}) {	JQ.Call("error", i...) }


// Map Translate all items in an array or object to new array of items.
//
// see http://api.jquery.com/jQuery.map
//
func Map(i ...interface{}) *js.Object  {
	j:= JQ.Call("map", i...)
	return j
}


// Grep Finds the elements of an array which satisfy a filter function. The original array is not affected.
//
// see http://api.jquery.com/jQuery.grep
//
func Grep(i ...interface{}) *js.Object  {
	j:= JQ.Call("grep", i...)
	return j
}


// Noop An empty function.
//
// see http://api.jquery.com/jQuery.noop
//
func Noop(i ...interface{}) {	JQ.Call("noop", i...) }


// When Provides a way to execute callback functions based on one or more objects, usually  objects that represent asynchronous events.
//
// see http://api.jquery.com/jQuery.when
//
func When(i ...interface{}) *js.Object  {
	j:= JQ.Call("when", i...)
	return j
}


// ParseHTML Parses a string into an array of DOM nodes.
//
// see http://api.jquery.com/jQuery.parseHTML
//
func ParseHTML(i ...interface{}) *js.Object  {
	j:= JQ.Call("parseHTML", i...)
	return j
}


// NewDeferred  A factory function that returns a chainable utility object with methods to register multiple callbacks into callback queues, invoke callback queues, and relay the success or failure state of any synchronous or asynchronous function.
//
// see http://api.jquery.com/NewDeferred
//
func NewDeferred(i ...interface{}) Deferred  {
	j:= JQ.Call("NewDeferred", i...)
	return newDeferred(j)
}


// AjaxPrefilter Handle custom Ajax options or modify existing options before each request is sent and before they are processed by .
//
// see http://api.jquery.com/jQuery.ajaxPrefilter
//
func AjaxPrefilter(i ...interface{}) {	JQ.Call("ajaxPrefilter", i...) }


// ParseJSON Takes a well-formed JSON string and returns the resulting JavaScript value.
//
// see http://api.jquery.com/jQuery.parseJSON
//
func ParseJSON(i ...interface{}) {	JQ.Call("parseJSON", i...) }


// Param Create a serialized representation of an array, a plain object, or a jQuery object suitable for use in a URL query string or Ajax request. In case a jQuery object is passed, it should contain input elements with name/value properties.
//
// see http://api.jquery.com/jQuery.param
//
func Param(i ...interface{}) string  {
	j:= JQ.Call("param", i...)
	return j.String()
}


// Merge Merge the contents of two arrays together into the first array. 
//
// see http://api.jquery.com/jQuery.merge
//
func Merge(i ...interface{}) *js.Object  {
	j:= JQ.Call("merge", i...)
	return j
}


// HasData Determine whether an element has any jQuery data associated with it.
//
// see http://api.jquery.com/jQuery.hasData
//
func HasData(i ...interface{}) bool  {
	j:= JQ.Call("hasData", i...)
	return j.Bool()
}


// HoldReady Holds or releases the execution of jQuery's ready event.
//
// see http://api.jquery.com/jQuery.holdReady
//
func HoldReady(i ...interface{}) {	JQ.Call("holdReady", i...) }


// Ajax Perform an asynchronous HTTP (Ajax) request.
//
// see http://api.jquery.com/jQuery.ajax
//
func Ajax(i ...interface{}) *js.Object  {
	j:= JQ.Call("ajax", i...)
	return j
}


// Post Load data from the server using a HTTP POST request.
//
// see http://api.jquery.com/jQuery.post
//
func Post(i ...interface{}) *js.Object  {
	j:= JQ.Call("post", i...)
	return j
}


// AjaxSetup Set default values for future Ajax requests. Its use is not recommended.
//
// see http://api.jquery.com/jQuery.ajaxSetup
//
func AjaxSetup(i ...interface{}) {	JQ.Call("ajaxSetup", i...) }


// NoConflict Relinquish jQuery's control of the  variable.
//
// see http://api.jquery.com/jQuery.noConflict
//
func NoConflict(i ...interface{}) *js.Object  {
	j:= JQ.Call("noConflict", i...)
	return j
}


// Contains Check to see if a DOM element is a descendant of another DOM element.
//
// see http://api.jquery.com/jQuery.contains
//
func Contains(i ...interface{}) bool  {
	j:= JQ.Call("contains", i...)
	return j.Bool()
}


// IsPlainObject Check to see if an object is a plain object (created using "{}" or "new Object").
//
// see http://api.jquery.com/jQuery.isPlainObject
//
func IsPlainObject(i ...interface{}) bool  {
	j:= JQ.Call("isPlainObject", i...)
	return j.Bool()
}


// IsXMLDoc Check to see if a DOM node is within an XML document (or is an XML document).
//
// see http://api.jquery.com/jQuery.isXMLDoc
//
func IsXMLDoc(i ...interface{}) bool  {
	j:= JQ.Call("isXMLDoc", i...)
	return j.Bool()
}


// Each A generic iterator function, which can be used to seamlessly iterate over both objects and arrays. Arrays and array-like objects with a length property (such as a function's arguments object) are iterated by numeric index, from 0 to length-1. Other objects are iterated via their named properties.
//
// see http://api.jquery.com/jQuery.each
//
func Each(i ...interface{}) *js.Object  {
	j:= JQ.Call("each", i...)
	return j
}


type Callbacks struct {
	*js.Object
	
}

func newCallbacks(j *js.Object) Callbacks {return Callbacks{Object: j} }

	
	// Add Add a callback or a collection of callbacks to a callback list.
	//
	// see http://api.jquery.com/callbacks.add
	//
	func (x Callbacks) Add(i ...interface{}) Callbacks {
		j:=x.Call("add", i...)
		return newCallbacks(j)
	}
	
	
	// Disable Disable a callback list from doing anything more.
	//
	// see http://api.jquery.com/callbacks.disable
	//
	func (x Callbacks) Disable(i ...interface{}) Callbacks {
		j:=x.Call("disable", i...)
		return newCallbacks(j)
	}
	
	
	// Disabled Determine if the callbacks list has been disabled.
	//
	// see http://api.jquery.com/callbacks.disabled
	//
	func (x Callbacks) Disabled(i ...interface{}) bool {
		j:=x.Call("disabled", i...)
		return j.Bool()
	}
	
	
	// Empty Remove all of the callbacks from a list.
	//
	// see http://api.jquery.com/callbacks.empty
	//
	func (x Callbacks) Empty(i ...interface{}) Callbacks {
		j:=x.Call("empty", i...)
		return newCallbacks(j)
	}
	
	
	// Fire Call all of the callbacks with the given arguments
	//
	// see http://api.jquery.com/callbacks.fire
	//
	func (x Callbacks) Fire(i ...interface{}) Callbacks {
		j:=x.Call("fire", i...)
		return newCallbacks(j)
	}
	
	
	// FireWith Call all callbacks in a list with the given context and arguments.
	//
	// see http://api.jquery.com/callbacks.fireWith
	//
	func (x Callbacks) FireWith(i ...interface{}) Callbacks {
		j:=x.Call("fireWith", i...)
		return newCallbacks(j)
	}
	
	
	// Fired Determine if the callbacks have already been called at least once.
	//
	// see http://api.jquery.com/callbacks.fired
	//
	func (x Callbacks) Fired(i ...interface{}) bool {
		j:=x.Call("fired", i...)
		return j.Bool()
	}
	
	
	// Has Determine whether or not the list has any callbacks attached. If a callback is provided as an argument, determine whether it is in a list.
	//
	// see http://api.jquery.com/callbacks.has
	//
	func (x Callbacks) Has(i ...interface{}) bool {
		j:=x.Call("has", i...)
		return j.Bool()
	}
	
	
	// Lock Lock a callback list in its current state.
	//
	// see http://api.jquery.com/callbacks.lock
	//
	func (x Callbacks) Lock(i ...interface{}) Callbacks {
		j:=x.Call("lock", i...)
		return newCallbacks(j)
	}
	
	
	// Locked Determine if the callbacks list has been locked.
	//
	// see http://api.jquery.com/callbacks.locked
	//
	func (x Callbacks) Locked(i ...interface{}) bool {
		j:=x.Call("locked", i...)
		return j.Bool()
	}
	
	
	// Remove Remove a callback or a collection of callbacks from a callback list.
	//
	// see http://api.jquery.com/callbacks.remove
	//
	func (x Callbacks) Remove(i ...interface{}) Callbacks {
		j:=x.Call("remove", i...)
		return newCallbacks(j)
	}
	
	

type JQuery struct {
	*js.Object
	
	Context *js.Object `js:"context"`
	Jquery string `js:"jquery"`
	Length int `js:"length"`
	Selector string `js:"selector"`
}

func newJQuery(j *js.Object) JQuery {return JQuery{Object: j} }

	
	// Add Create a new jQuery object with elements added to the set of matched elements.
	//
	// see http://api.jquery.com/add
	//
	func (x JQuery) Add(i ...interface{}) JQuery {
		j:=x.Call("add", i...)
		return newJQuery(j)
	}
	
	
	// AddBack Add the previous set of elements on the stack to the current set, optionally filtered by a selector.
	//
	// see http://api.jquery.com/addBack
	//
	func (x JQuery) AddBack(i ...interface{}) JQuery {
		j:=x.Call("addBack", i...)
		return newJQuery(j)
	}
	
	
	// AddClass Adds the specified class(es) to each of the set of matched elements.
	//
	// see http://api.jquery.com/addClass
	//
	func (x JQuery) AddClass(i ...interface{}) JQuery {
		j:=x.Call("addClass", i...)
		return newJQuery(j)
	}
	
	
	// After Insert content, specified by the parameter, after each element in the set of matched elements.
	//
	// see http://api.jquery.com/after
	//
	func (x JQuery) After(i ...interface{}) JQuery {
		j:=x.Call("after", i...)
		return newJQuery(j)
	}
	
	
	// AjaxComplete Register a handler to be called when Ajax requests complete. This is an .
	//
	// see http://api.jquery.com/ajaxComplete
	//
	func (x JQuery) AjaxComplete(i ...interface{}) JQuery {
		j:=x.Call("ajaxComplete", i...)
		return newJQuery(j)
	}
	
	
	// AjaxError Register a handler to be called when Ajax requests complete with an error. This is an .
	//
	// see http://api.jquery.com/ajaxError
	//
	func (x JQuery) AjaxError(i ...interface{}) JQuery {
		j:=x.Call("ajaxError", i...)
		return newJQuery(j)
	}
	
	
	// AjaxSend Attach a function to be executed before an Ajax request is sent. This is an .
	//
	// see http://api.jquery.com/ajaxSend
	//
	func (x JQuery) AjaxSend(i ...interface{}) JQuery {
		j:=x.Call("ajaxSend", i...)
		return newJQuery(j)
	}
	
	
	// AjaxStart Register a handler to be called when the first Ajax request begins. This is an .
	//
	// see http://api.jquery.com/ajaxStart
	//
	func (x JQuery) AjaxStart(i ...interface{}) JQuery {
		j:=x.Call("ajaxStart", i...)
		return newJQuery(j)
	}
	
	
	// AjaxStop Register a handler to be called when all Ajax requests have completed. This is an .
	//
	// see http://api.jquery.com/ajaxStop
	//
	func (x JQuery) AjaxStop(i ...interface{}) JQuery {
		j:=x.Call("ajaxStop", i...)
		return newJQuery(j)
	}
	
	
	// AjaxSuccess Attach a function to be executed whenever an Ajax request completes successfully. This is an .
	//
	// see http://api.jquery.com/ajaxSuccess
	//
	func (x JQuery) AjaxSuccess(i ...interface{}) JQuery {
		j:=x.Call("ajaxSuccess", i...)
		return newJQuery(j)
	}
	
	
	// AndSelf Add the previous set of elements on the stack to the current set.
	//
	// see http://api.jquery.com/andSelf
	//
	func (x JQuery) AndSelf(i ...interface{}) JQuery {
		j:=x.Call("andSelf", i...)
		return newJQuery(j)
	}
	
	
	// Animate Perform a custom animation of a set of CSS properties.
	//
	// see http://api.jquery.com/animate
	//
	func (x JQuery) Animate(i ...interface{}) JQuery {
		j:=x.Call("animate", i...)
		return newJQuery(j)
	}
	
	
	// Append Insert content, specified by the parameter, to the end of each element in the set of matched elements.
	//
	// see http://api.jquery.com/append
	//
	func (x JQuery) Append(i ...interface{}) JQuery {
		j:=x.Call("append", i...)
		return newJQuery(j)
	}
	
	
	// AppendTo Insert every element in the set of matched elements to the end of the target.
	//
	// see http://api.jquery.com/appendTo
	//
	func (x JQuery) AppendTo(i ...interface{}) JQuery {
		j:=x.Call("appendTo", i...)
		return newJQuery(j)
	}
	
	
	// Attr Get the value of an attribute for the first element in the set of matched elements. OR Set one or more attributes for the set of matched elements.
	//
	// see http://api.jquery.com/attr
	//
	func (x JQuery) Attr(i ...interface{}) string {
		j:=x.Call("attr", i...)
		return j.String()
	}
	
	
	// Before Insert content, specified by the parameter, before each element in the set of matched elements.
	//
	// see http://api.jquery.com/before
	//
	func (x JQuery) Before(i ...interface{}) JQuery {
		j:=x.Call("before", i...)
		return newJQuery(j)
	}
	
	
	// Bind Attach a handler to an event for the elements.
	//
	// see http://api.jquery.com/bind
	//
	func (x JQuery) Bind(i ...interface{}) JQuery {
		j:=x.Call("bind", i...)
		return newJQuery(j)
	}
	
	
	// Blur Bind an event handler to the "blur" JavaScript event, or trigger that event on an element.
	//
	// see http://api.jquery.com/blur
	//
	func (x JQuery) Blur(i ...interface{}) JQuery {
		j:=x.Call("blur", i...)
		return newJQuery(j)
	}
	
	
	// Change Bind an event handler to the "change" JavaScript event, or trigger that event on an element.
	//
	// see http://api.jquery.com/change
	//
	func (x JQuery) Change(i ...interface{}) JQuery {
		j:=x.Call("change", i...)
		return newJQuery(j)
	}
	
	
	// Children Get the children of each element in the set of matched elements, optionally filtered by a selector.
	//
	// see http://api.jquery.com/children
	//
	func (x JQuery) Children(i ...interface{}) JQuery {
		j:=x.Call("children", i...)
		return newJQuery(j)
	}
	
	
	// ClearQueue Remove from the queue all items that have not yet been run.
	//
	// see http://api.jquery.com/clearQueue
	//
	func (x JQuery) ClearQueue(i ...interface{}) JQuery {
		j:=x.Call("clearQueue", i...)
		return newJQuery(j)
	}
	
	
	// Click Bind an event handler to the "click" JavaScript event, or trigger that event on an element.
	//
	// see http://api.jquery.com/click
	//
	func (x JQuery) Click(i ...interface{}) JQuery {
		j:=x.Call("click", i...)
		return newJQuery(j)
	}
	
	
	// Clone Create a deep copy of the set of matched elements.
	//
	// see http://api.jquery.com/clone
	//
	func (x JQuery) Clone(i ...interface{}) JQuery {
		j:=x.Call("clone", i...)
		return newJQuery(j)
	}
	
	
	// Closest For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree. OR Get an array of all the elements and selectors matched against the current element up through the DOM tree.
	//
	// see http://api.jquery.com/closest
	//
	func (x JQuery) Closest(i ...interface{}) JQuery {
		j:=x.Call("closest", i...)
		return newJQuery(j)
	}
	
	
	// Contents Get the children of each element in the set of matched elements, including text and comment nodes.
	//
	// see http://api.jquery.com/contents
	//
	func (x JQuery) Contents(i ...interface{}) JQuery {
		j:=x.Call("contents", i...)
		return newJQuery(j)
	}
	
	
	// Css Get the computed style properties for the first element in the set of matched elements. OR Set one or more CSS properties for the set of matched elements.
	//
	// see http://api.jquery.com/css
	//
	func (x JQuery) Css(i ...interface{}) string {
		j:=x.Call("css", i...)
		return j.String()
	}
	
	
	// Data Store arbitrary data associated with the matched elements. OR Return the value at the named data store for the first element in the jQuery collection, as set by data(name, value) or by an HTML5 data-* attribute.
	//
	// see http://api.jquery.com/data
	//
	func (x JQuery) Data(i ...interface{}) JQuery {
		j:=x.Call("data", i...)
		return newJQuery(j)
	}
	
	
	// Dblclick Bind an event handler to the "dblclick" JavaScript event, or trigger that event on an element.
	//
	// see http://api.jquery.com/dblclick
	//
	func (x JQuery) Dblclick(i ...interface{}) JQuery {
		j:=x.Call("dblclick", i...)
		return newJQuery(j)
	}
	
	
	// Delay Set a timer to delay execution of subsequent items in the queue.
	//
	// see http://api.jquery.com/delay
	//
	func (x JQuery) Delay(i ...interface{}) JQuery {
		j:=x.Call("delay", i...)
		return newJQuery(j)
	}
	
	
	// Delegate Attach a handler to one or more events for all elements that match the selector, now or in the future, based on a specific set of root elements.
	//
	// see http://api.jquery.com/delegate
	//
	func (x JQuery) Delegate(i ...interface{}) JQuery {
		j:=x.Call("delegate", i...)
		return newJQuery(j)
	}
	
	
	// Dequeue Execute the next function on the queue for the matched elements.
	//
	// see http://api.jquery.com/dequeue
	//
	func (x JQuery) Dequeue(i ...interface{}) JQuery {
		j:=x.Call("dequeue", i...)
		return newJQuery(j)
	}
	
	
	// Detach Remove the set of matched elements from the DOM.
	//
	// see http://api.jquery.com/detach
	//
	func (x JQuery) Detach(i ...interface{}) JQuery {
		j:=x.Call("detach", i...)
		return newJQuery(j)
	}
	
	
	// Die Remove event handlers previously attached using  from the elements.
	//
	// see http://api.jquery.com/die
	//
	func (x JQuery) Die(i ...interface{}) JQuery {
		j:=x.Call("die", i...)
		return newJQuery(j)
	}
	
	
	// Each Iterate over a jQuery object, executing a function for each matched element. 
	//
	// see http://api.jquery.com/each
	//
	func (x JQuery) Each(i ...interface{}) JQuery {
		j:=x.Call("each", i...)
		return newJQuery(j)
	}
	
	
	// End End the most recent filtering operation in the current chain and return the set of matched elements to its previous state.
	//
	// see http://api.jquery.com/end
	//
	func (x JQuery) End(i ...interface{}) JQuery {
		j:=x.Call("end", i...)
		return newJQuery(j)
	}
	
	
	// Error Bind an event handler to the "error" JavaScript event.
	//
	// see http://api.jquery.com/error
	//
	func (x JQuery) Error(i ...interface{}) JQuery {
		j:=x.Call("error", i...)
		return newJQuery(j)
	}
	
	
	// FadeIn Display the matched elements by fading them to opaque.
	//
	// see http://api.jquery.com/fadeIn
	//
	func (x JQuery) FadeIn(i ...interface{}) JQuery {
		j:=x.Call("fadeIn", i...)
		return newJQuery(j)
	}
	
	
	// FadeOut Hide the matched elements by fading them to transparent.
	//
	// see http://api.jquery.com/fadeOut
	//
	func (x JQuery) FadeOut(i ...interface{}) JQuery {
		j:=x.Call("fadeOut", i...)
		return newJQuery(j)
	}
	
	
	// FadeTo Adjust the opacity of the matched elements.
	//
	// see http://api.jquery.com/fadeTo
	//
	func (x JQuery) FadeTo(i ...interface{}) JQuery {
		j:=x.Call("fadeTo", i...)
		return newJQuery(j)
	}
	
	
	// FadeToggle Display or hide the matched elements by animating their opacity.
	//
	// see http://api.jquery.com/fadeToggle
	//
	func (x JQuery) FadeToggle(i ...interface{}) JQuery {
		j:=x.Call("fadeToggle", i...)
		return newJQuery(j)
	}
	
	
	// Filter Reduce the set of matched elements to those that match the selector or pass the function's test. 
	//
	// see http://api.jquery.com/filter
	//
	func (x JQuery) Filter(i ...interface{}) JQuery {
		j:=x.Call("filter", i...)
		return newJQuery(j)
	}
	
	
	// Find Get the descendants of each element in the current set of matched elements, filtered by a selector, jQuery object, or element.
	//
	// see http://api.jquery.com/find
	//
	func (x JQuery) Find(i ...interface{}) JQuery {
		j:=x.Call("find", i...)
		return newJQuery(j)
	}
	
	
	// Finish Stop the currently-running animation, remove all queued animations, and complete all animations for the matched elements.
	//
	// see http://api.jquery.com/finish
	//
	func (x JQuery) Finish(i ...interface{}) JQuery {
		j:=x.Call("finish", i...)
		return newJQuery(j)
	}
	
	
	// Focusin Bind an event handler to the "focusin" event.
	//
	// see http://api.jquery.com/focusin
	//
	func (x JQuery) Focusin(i ...interface{}) JQuery {
		j:=x.Call("focusin", i...)
		return newJQuery(j)
	}
	
	
	// Focusout Bind an event handler to the "focusout" JavaScript event.
	//
	// see http://api.jquery.com/focusout
	//
	func (x JQuery) Focusout(i ...interface{}) JQuery {
		j:=x.Call("focusout", i...)
		return newJQuery(j)
	}
	
	
	// Get Retrieve one of the elements matched by the jQuery object. OR Retrieve the elements matched by the jQuery object.
	//
	// see http://api.jquery.com/get
	//
	func (x JQuery) Get(i ...interface{}) *js.Object {
		j:=x.Call("get", i...)
		return j
	}
	
	
	// HasClass Determine whether any of the matched elements are assigned the given class.
	//
	// see http://api.jquery.com/hasClass
	//
	func (x JQuery) HasClass(i ...interface{}) bool {
		j:=x.Call("hasClass", i...)
		return j.Bool()
	}
	
	
	// Height Get the current computed height for the first element in the set of matched elements. OR Set the CSS height of every matched element.
	//
	// see http://api.jquery.com/height
	//
	func (x JQuery) Height(i ...interface{}) float64 {
		j:=x.Call("height", i...)
		return j.Float()
	}
	
	
	// Hide Hide the matched elements.
	//
	// see http://api.jquery.com/hide
	//
	func (x JQuery) Hide(i ...interface{}) JQuery {
		j:=x.Call("hide", i...)
		return newJQuery(j)
	}
	
	
	// Hover Bind two handlers to the matched elements, to be executed when the mouse pointer enters and leaves the elements. OR Bind a single handler to the matched elements, to be executed when the mouse pointer enters or leaves the elements.
	//
	// see http://api.jquery.com/hover
	//
	func (x JQuery) Hover(i ...interface{}) JQuery {
		j:=x.Call("hover", i...)
		return newJQuery(j)
	}
	
	
	// Html Get the HTML contents of the first element in the set of matched elements. OR Set the HTML contents of each element in the set of matched elements.
	//
	// see http://api.jquery.com/html
	//
	func (x JQuery) Html(i ...interface{}) string {
		j:=x.Call("html", i...)
		return j.String()
	}
	
	
	// Index Search for a given element from among the matched elements.
	//
	// see http://api.jquery.com/index
	//
	func (x JQuery) Index(i ...interface{}) float64 {
		j:=x.Call("index", i...)
		return j.Float()
	}
	
	
	// InnerHeight Get the current computed height for the first element in the set of matched elements, including padding but not border. OR Set the CSS inner height of each element in the set of matched elements.
	//
	// see http://api.jquery.com/innerHeight
	//
	func (x JQuery) InnerHeight(i ...interface{}) float64 {
		j:=x.Call("innerHeight", i...)
		return j.Float()
	}
	
	
	// InnerWidth Get the current computed inner width for the first element in the set of matched elements, including padding but not border. OR Set the CSS inner width of each element in the set of matched elements.
	//
	// see http://api.jquery.com/innerWidth
	//
	func (x JQuery) InnerWidth(i ...interface{}) int {
		j:=x.Call("innerWidth", i...)
		return j.Int()
	}
	
	
	// InsertAfter Insert every element in the set of matched elements after the target.
	//
	// see http://api.jquery.com/insertAfter
	//
	func (x JQuery) InsertAfter(i ...interface{}) JQuery {
		j:=x.Call("insertAfter", i...)
		return newJQuery(j)
	}
	
	
	// InsertBefore Insert every element in the set of matched elements before the target.
	//
	// see http://api.jquery.com/insertBefore
	//
	func (x JQuery) InsertBefore(i ...interface{}) JQuery {
		j:=x.Call("insertBefore", i...)
		return newJQuery(j)
	}
	
	
	// Is Check the current matched set of elements against a selector, element, or jQuery object and return  if at least one of these elements matches the given arguments.
	//
	// see http://api.jquery.com/is
	//
	func (x JQuery) Is(i ...interface{}) bool {
		j:=x.Call("is", i...)
		return j.Bool()
	}
	
	
	// JQuery Accepts a string containing a CSS selector which is then used to match a set of elements. OR Creates DOM elements on the fly from the provided string of raw HTML. OR Binds a function to be executed when the DOM has finished loading.
	//
	// see http://api.jquery.com/jQuery
	//
	func (x JQuery) JQuery(i ...interface{}) JQuery {
		j:=x.Call("jQuery", i...)
		return newJQuery(j)
	}
	
	
	// Keydown Bind an event handler to the "keydown" JavaScript event, or trigger that event on an element.
	//
	// see http://api.jquery.com/keydown
	//
	func (x JQuery) Keydown(i ...interface{}) JQuery {
		j:=x.Call("keydown", i...)
		return newJQuery(j)
	}
	
	
	// Keypress Bind an event handler to the "keypress" JavaScript event, or trigger that event on an element.
	//
	// see http://api.jquery.com/keypress
	//
	func (x JQuery) Keypress(i ...interface{}) JQuery {
		j:=x.Call("keypress", i...)
		return newJQuery(j)
	}
	
	
	// Keyup Bind an event handler to the "keyup" JavaScript event, or trigger that event on an element.
	//
	// see http://api.jquery.com/keyup
	//
	func (x JQuery) Keyup(i ...interface{}) JQuery {
		j:=x.Call("keyup", i...)
		return newJQuery(j)
	}
	
	
	// Live Attach an event handler for all elements which match the current selector, now and in the future.
	//
	// see http://api.jquery.com/live
	//
	func (x JQuery) Live(i ...interface{}) JQuery {
		j:=x.Call("live", i...)
		return newJQuery(j)
	}
	
	
	// Load Bind an event handler to the "load" JavaScript event. OR Load data from the server and place the returned HTML into the matched element.
	//
	// see http://api.jquery.com/load
	//
	func (x JQuery) Load(i ...interface{}) JQuery {
		j:=x.Call("load", i...)
		return newJQuery(j)
	}
	
	
	// Map Pass each element in the current matched set through a function, producing a new jQuery object containing the return values.
	//
	// see http://api.jquery.com/map
	//
	func (x JQuery) Map(i ...interface{}) JQuery {
		j:=x.Call("map", i...)
		return newJQuery(j)
	}
	
	
	// Mousedown Bind an event handler to the "mousedown" JavaScript event, or trigger that event on an element.
	//
	// see http://api.jquery.com/mousedown
	//
	func (x JQuery) Mousedown(i ...interface{}) JQuery {
		j:=x.Call("mousedown", i...)
		return newJQuery(j)
	}
	
	
	// Mouseenter Bind an event handler to be fired when the mouse enters an element, or trigger that handler on an element.
	//
	// see http://api.jquery.com/mouseenter
	//
	func (x JQuery) Mouseenter(i ...interface{}) JQuery {
		j:=x.Call("mouseenter", i...)
		return newJQuery(j)
	}
	
	
	// Mouseleave Bind an event handler to be fired when the mouse leaves an element, or trigger that handler on an element.
	//
	// see http://api.jquery.com/mouseleave
	//
	func (x JQuery) Mouseleave(i ...interface{}) JQuery {
		j:=x.Call("mouseleave", i...)
		return newJQuery(j)
	}
	
	
	// Mousemove Bind an event handler to the "mousemove" JavaScript event, or trigger that event on an element.
	//
	// see http://api.jquery.com/mousemove
	//
	func (x JQuery) Mousemove(i ...interface{}) JQuery {
		j:=x.Call("mousemove", i...)
		return newJQuery(j)
	}
	
	
	// Mouseout Bind an event handler to the "mouseout" JavaScript event, or trigger that event on an element.
	//
	// see http://api.jquery.com/mouseout
	//
	func (x JQuery) Mouseout(i ...interface{}) JQuery {
		j:=x.Call("mouseout", i...)
		return newJQuery(j)
	}
	
	
	// Mouseover Bind an event handler to the "mouseover" JavaScript event, or trigger that event on an element.
	//
	// see http://api.jquery.com/mouseover
	//
	func (x JQuery) Mouseover(i ...interface{}) JQuery {
		j:=x.Call("mouseover", i...)
		return newJQuery(j)
	}
	
	
	// Mouseup Bind an event handler to the "mouseup" JavaScript event, or trigger that event on an element.
	//
	// see http://api.jquery.com/mouseup
	//
	func (x JQuery) Mouseup(i ...interface{}) JQuery {
		j:=x.Call("mouseup", i...)
		return newJQuery(j)
	}
	
	
	// Next Get the immediately following sibling of each element in the set of matched elements. If a selector is provided, it retrieves the next sibling only if it matches that selector.
	//
	// see http://api.jquery.com/next
	//
	func (x JQuery) Next(i ...interface{}) JQuery {
		j:=x.Call("next", i...)
		return newJQuery(j)
	}
	
	
	// NextAll Get all following siblings of each element in the set of matched elements, optionally filtered by a selector.
	//
	// see http://api.jquery.com/nextAll
	//
	func (x JQuery) NextAll(i ...interface{}) JQuery {
		j:=x.Call("nextAll", i...)
		return newJQuery(j)
	}
	
	
	// NextUntil Get all following siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object passed.
	//
	// see http://api.jquery.com/nextUntil
	//
	func (x JQuery) NextUntil(i ...interface{}) JQuery {
		j:=x.Call("nextUntil", i...)
		return newJQuery(j)
	}
	
	
	// Off Remove an event handler.
	//
	// see http://api.jquery.com/off
	//
	func (x JQuery) Off(i ...interface{}) JQuery {
		j:=x.Call("off", i...)
		return newJQuery(j)
	}
	
	
	// Offset Get the current coordinates of the first element in the set of matched elements, relative to the document. OR Set the current coordinates of every element in the set of matched elements, relative to the document.
	//
	// see http://api.jquery.com/offset
	//
	func (x JQuery) Offset(i ...interface{}) *js.Object {
		j:=x.Call("offset", i...)
		return j
	}
	
	
	// OffsetParent Get the closest ancestor element that is positioned.
	//
	// see http://api.jquery.com/offsetParent
	//
	func (x JQuery) OffsetParent(i ...interface{}) JQuery {
		j:=x.Call("offsetParent", i...)
		return newJQuery(j)
	}
	
	
	// On Attach an event handler function for one or more events to the selected elements.
	//
	// see http://api.jquery.com/on
	//
	func (x JQuery) On(i ...interface{}) JQuery {
		j:=x.Call("on", i...)
		return newJQuery(j)
	}
	
	
	// One Attach a handler to an event for the elements. The handler is executed at most once per element per event type.
	//
	// see http://api.jquery.com/one
	//
	func (x JQuery) One(i ...interface{}) JQuery {
		j:=x.Call("one", i...)
		return newJQuery(j)
	}
	
	
	// OuterHeight Get the current computed height for the first element in the set of matched elements, including padding, border, and optionally margin. Returns a number (without "px") representation of the value or null if called on an empty set of elements. OR Set the CSS outer Height of each element in the set of matched elements.
	//
	// see http://api.jquery.com/outerHeight
	//
	func (x JQuery) OuterHeight(i ...interface{}) float64 {
		j:=x.Call("outerHeight", i...)
		return j.Float()
	}
	
	
	// OuterWidth Get the current computed width for the first element in the set of matched elements, including padding and border. OR Set the CSS outer width of each element in the set of matched elements.
	//
	// see http://api.jquery.com/outerWidth
	//
	func (x JQuery) OuterWidth(i ...interface{}) float64 {
		j:=x.Call("outerWidth", i...)
		return j.Float()
	}
	
	
	// Parents Get the ancestors of each element in the current set of matched elements, optionally filtered by a selector.
	//
	// see http://api.jquery.com/parents
	//
	func (x JQuery) Parents(i ...interface{}) JQuery {
		j:=x.Call("parents", i...)
		return newJQuery(j)
	}
	
	
	// ParentsUntil Get the ancestors of each element in the current set of matched elements, up to but not including the element matched by the selector, DOM node, or jQuery object.
	//
	// see http://api.jquery.com/parentsUntil
	//
	func (x JQuery) ParentsUntil(i ...interface{}) JQuery {
		j:=x.Call("parentsUntil", i...)
		return newJQuery(j)
	}
	
	
	// Position Get the current coordinates of the first element in the set of matched elements, relative to the offset parent.
	//
	// see http://api.jquery.com/position
	//
	func (x JQuery) Position(i ...interface{}) *js.Object {
		j:=x.Call("position", i...)
		return j
	}
	
	
	// Prepend Insert content, specified by the parameter, to the beginning of each element in the set of matched elements.
	//
	// see http://api.jquery.com/prepend
	//
	func (x JQuery) Prepend(i ...interface{}) JQuery {
		j:=x.Call("prepend", i...)
		return newJQuery(j)
	}
	
	
	// PrependTo Insert every element in the set of matched elements to the beginning of the target.
	//
	// see http://api.jquery.com/prependTo
	//
	func (x JQuery) PrependTo(i ...interface{}) JQuery {
		j:=x.Call("prependTo", i...)
		return newJQuery(j)
	}
	
	
	// Prev Get the immediately preceding sibling of each element in the set of matched elements, optionally filtered by a selector.
	//
	// see http://api.jquery.com/prev
	//
	func (x JQuery) Prev(i ...interface{}) JQuery {
		j:=x.Call("prev", i...)
		return newJQuery(j)
	}
	
	
	// PrevAll Get all preceding siblings of each element in the set of matched elements, optionally filtered by a selector.
	//
	// see http://api.jquery.com/prevAll
	//
	func (x JQuery) PrevAll(i ...interface{}) JQuery {
		j:=x.Call("prevAll", i...)
		return newJQuery(j)
	}
	
	
	// PrevUntil Get all preceding siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object.
	//
	// see http://api.jquery.com/prevUntil
	//
	func (x JQuery) PrevUntil(i ...interface{}) JQuery {
		j:=x.Call("prevUntil", i...)
		return newJQuery(j)
	}
	
	
	// Promise  Return a Promise object to observe when all actions of a certain type bound to the collection, queued or not, have finished. 
	//
	// see http://api.jquery.com/promise
	//
	func (x JQuery) Promise(i ...interface{}) *js.Object {
		j:=x.Call("promise", i...)
		return j
	}
	
	
	// Prop Get the value of a property for the first element in the set of matched elements. OR Set one or more properties for the set of matched elements.
	//
	// see http://api.jquery.com/prop
	//
	func (x JQuery) Prop(i ...interface{})  {x.Call("prop", i...)}
	
	
	// PushStack Add a collection of DOM elements onto the jQuery stack.
	//
	// see http://api.jquery.com/pushStack
	//
	func (x JQuery) PushStack(i ...interface{}) JQuery {
		j:=x.Call("pushStack", i...)
		return newJQuery(j)
	}
	
	
	// Queue Show the queue of functions to be executed on the matched elements. OR Manipulate the queue of functions to be executed, once for each matched element.
	//
	// see http://api.jquery.com/queue
	//
	func (x JQuery) Queue(i ...interface{}) *js.Object {
		j:=x.Call("queue", i...)
		return j
	}
	
	
	// Ready Specify a function to execute when the DOM is fully loaded.
	//
	// see http://api.jquery.com/ready
	//
	func (x JQuery) Ready(i ...interface{}) JQuery {
		j:=x.Call("ready", i...)
		return newJQuery(j)
	}
	
	
	// Remove Remove the set of matched elements from the DOM.
	//
	// see http://api.jquery.com/remove
	//
	func (x JQuery) Remove(i ...interface{}) JQuery {
		j:=x.Call("remove", i...)
		return newJQuery(j)
	}
	
	
	// RemoveAttr Remove an attribute from each element in the set of matched elements.
	//
	// see http://api.jquery.com/removeAttr
	//
	func (x JQuery) RemoveAttr(i ...interface{}) JQuery {
		j:=x.Call("removeAttr", i...)
		return newJQuery(j)
	}
	
	
	// RemoveClass Remove a single class, multiple classes, or all classes from each element in the set of matched elements.
	//
	// see http://api.jquery.com/removeClass
	//
	func (x JQuery) RemoveClass(i ...interface{}) JQuery {
		j:=x.Call("removeClass", i...)
		return newJQuery(j)
	}
	
	
	// RemoveData Remove a previously-stored piece of data.
	//
	// see http://api.jquery.com/removeData
	//
	func (x JQuery) RemoveData(i ...interface{}) JQuery {
		j:=x.Call("removeData", i...)
		return newJQuery(j)
	}
	
	
	// RemoveProp Remove a property for the set of matched elements.
	//
	// see http://api.jquery.com/removeProp
	//
	func (x JQuery) RemoveProp(i ...interface{}) JQuery {
		j:=x.Call("removeProp", i...)
		return newJQuery(j)
	}
	
	
	// ReplaceAll Replace each target element with the set of matched elements.
	//
	// see http://api.jquery.com/replaceAll
	//
	func (x JQuery) ReplaceAll(i ...interface{}) JQuery {
		j:=x.Call("replaceAll", i...)
		return newJQuery(j)
	}
	
	
	// ReplaceWith Replace each element in the set of matched elements with the provided new content and return the set of elements that was removed.
	//
	// see http://api.jquery.com/replaceWith
	//
	func (x JQuery) ReplaceWith(i ...interface{}) JQuery {
		j:=x.Call("replaceWith", i...)
		return newJQuery(j)
	}
	
	
	// Resize Bind an event handler to the "resize" JavaScript event, or trigger that event on an element.
	//
	// see http://api.jquery.com/resize
	//
	func (x JQuery) Resize(i ...interface{}) JQuery {
		j:=x.Call("resize", i...)
		return newJQuery(j)
	}
	
	
	// Scroll Bind an event handler to the "scroll" JavaScript event, or trigger that event on an element.
	//
	// see http://api.jquery.com/scroll
	//
	func (x JQuery) Scroll(i ...interface{}) JQuery {
		j:=x.Call("scroll", i...)
		return newJQuery(j)
	}
	
	
	// ScrollLeft Get the current horizontal position of the scroll bar for the first element in the set of matched elements. OR Set the current horizontal position of the scroll bar for each of the set of matched elements.
	//
	// see http://api.jquery.com/scrollLeft
	//
	func (x JQuery) ScrollLeft(i ...interface{}) int {
		j:=x.Call("scrollLeft", i...)
		return j.Int()
	}
	
	
	// ScrollTop Get the current vertical position of the scroll bar for the first element in the set of matched elements or set the vertical position of the scroll bar for every matched element. OR Set the current vertical position of the scroll bar for each of the set of matched elements.
	//
	// see http://api.jquery.com/scrollTop
	//
	func (x JQuery) ScrollTop(i ...interface{}) int {
		j:=x.Call("scrollTop", i...)
		return j.Int()
	}
	
	
	// Select Bind an event handler to the "select" JavaScript event, or trigger that event on an element.
	//
	// see http://api.jquery.com/select
	//
	func (x JQuery) Select(i ...interface{}) JQuery {
		j:=x.Call("select", i...)
		return newJQuery(j)
	}
	
	
	// Serialize Encode a set of form elements as a string for submission.
	//
	// see http://api.jquery.com/serialize
	//
	func (x JQuery) Serialize(i ...interface{}) string {
		j:=x.Call("serialize", i...)
		return j.String()
	}
	
	
	// SerializeArray Encode a set of form elements as an array of names and values.
	//
	// see http://api.jquery.com/serializeArray
	//
	func (x JQuery) SerializeArray(i ...interface{}) *js.Object {
		j:=x.Call("serializeArray", i...)
		return j
	}
	
	
	// Show Display the matched elements.
	//
	// see http://api.jquery.com/show
	//
	func (x JQuery) Show(i ...interface{}) JQuery {
		j:=x.Call("show", i...)
		return newJQuery(j)
	}
	
	
	// Siblings Get the siblings of each element in the set of matched elements, optionally filtered by a selector.
	//
	// see http://api.jquery.com/siblings
	//
	func (x JQuery) Siblings(i ...interface{}) JQuery {
		j:=x.Call("siblings", i...)
		return newJQuery(j)
	}
	
	
	// Size Return the number of elements in the jQuery object.
	//
	// see http://api.jquery.com/size
	//
	func (x JQuery) Size(i ...interface{}) int {
		j:=x.Call("size", i...)
		return j.Int()
	}
	
	
	// Slice Reduce the set of matched elements to a subset specified by a range of indices.
	//
	// see http://api.jquery.com/slice
	//
	func (x JQuery) Slice(i ...interface{}) JQuery {
		j:=x.Call("slice", i...)
		return newJQuery(j)
	}
	
	
	// SlideDown Display the matched elements with a sliding motion.
	//
	// see http://api.jquery.com/slideDown
	//
	func (x JQuery) SlideDown(i ...interface{}) JQuery {
		j:=x.Call("slideDown", i...)
		return newJQuery(j)
	}
	
	
	// SlideToggle Display or hide the matched elements with a sliding motion.
	//
	// see http://api.jquery.com/slideToggle
	//
	func (x JQuery) SlideToggle(i ...interface{}) JQuery {
		j:=x.Call("slideToggle", i...)
		return newJQuery(j)
	}
	
	
	// SlideUp Hide the matched elements with a sliding motion.
	//
	// see http://api.jquery.com/slideUp
	//
	func (x JQuery) SlideUp(i ...interface{}) JQuery {
		j:=x.Call("slideUp", i...)
		return newJQuery(j)
	}
	
	
	// Stop Stop the currently-running animation on the matched elements.
	//
	// see http://api.jquery.com/stop
	//
	func (x JQuery) Stop(i ...interface{}) JQuery {
		j:=x.Call("stop", i...)
		return newJQuery(j)
	}
	
	
	// ToArray Retrieve all the elements contained in the jQuery set, as an array.
	//
	// see http://api.jquery.com/toArray
	//
	func (x JQuery) ToArray(i ...interface{}) *js.Object {
		j:=x.Call("toArray", i...)
		return j
	}
	
	
	// Toggle Bind two or more handlers to the matched elements, to be executed on alternate clicks. OR Display or hide the matched elements.
	//
	// see http://api.jquery.com/toggle
	//
	func (x JQuery) Toggle(i ...interface{}) JQuery {
		j:=x.Call("toggle", i...)
		return newJQuery(j)
	}
	
	
	// ToggleClass Add or remove one or more classes from each element in the set of matched elements, depending on either the class's presence or the value of the state argument.
	//
	// see http://api.jquery.com/toggleClass
	//
	func (x JQuery) ToggleClass(i ...interface{}) JQuery {
		j:=x.Call("toggleClass", i...)
		return newJQuery(j)
	}
	
	
	// Trigger Execute all handlers and behaviors attached to the matched elements for the given event type.
	//
	// see http://api.jquery.com/trigger
	//
	func (x JQuery) Trigger(i ...interface{}) JQuery {
		j:=x.Call("trigger", i...)
		return newJQuery(j)
	}
	
	
	// TriggerHandler Execute all handlers attached to an element for an event.
	//
	// see http://api.jquery.com/triggerHandler
	//
	func (x JQuery) TriggerHandler(i ...interface{}) *js.Object {
		j:=x.Call("triggerHandler", i...)
		return j
	}
	
	
	// Unbind Remove a previously-attached event handler from the elements.
	//
	// see http://api.jquery.com/unbind
	//
	func (x JQuery) Unbind(i ...interface{}) JQuery {
		j:=x.Call("unbind", i...)
		return newJQuery(j)
	}
	
	
	// Undelegate Remove a handler from the event for all elements which match the current selector, based upon a specific set of root elements.
	//
	// see http://api.jquery.com/undelegate
	//
	func (x JQuery) Undelegate(i ...interface{}) JQuery {
		j:=x.Call("undelegate", i...)
		return newJQuery(j)
	}
	
	
	// Unload Bind an event handler to the "unload" JavaScript event.
	//
	// see http://api.jquery.com/unload
	//
	func (x JQuery) Unload(i ...interface{}) JQuery {
		j:=x.Call("unload", i...)
		return newJQuery(j)
	}
	
	
	// Unwrap Remove the parents of the set of matched elements from the DOM, leaving the matched elements in their place.
	//
	// see http://api.jquery.com/unwrap
	//
	func (x JQuery) Unwrap(i ...interface{}) JQuery {
		j:=x.Call("unwrap", i...)
		return newJQuery(j)
	}
	
	
	// Val Get the current value of the first element in the set of matched elements. OR Set the value of each element in the set of matched elements.
	//
	// see http://api.jquery.com/val
	//
	func (x JQuery) Val(i ...interface{})  {x.Call("val", i...)}
	
	
	// Width Get the current computed width for the first element in the set of matched elements. OR Set the CSS width of each element in the set of matched elements.
	//
	// see http://api.jquery.com/width
	//
	func (x JQuery) Width(i ...interface{}) float64 {
		j:=x.Call("width", i...)
		return j.Float()
	}
	
	
	// Wrap Wrap an HTML structure around each element in the set of matched elements.
	//
	// see http://api.jquery.com/wrap
	//
	func (x JQuery) Wrap(i ...interface{}) JQuery {
		j:=x.Call("wrap", i...)
		return newJQuery(j)
	}
	
	
	// WrapAll Wrap an HTML structure around all elements in the set of matched elements.
	//
	// see http://api.jquery.com/wrapAll
	//
	func (x JQuery) WrapAll(i ...interface{}) JQuery {
		j:=x.Call("wrapAll", i...)
		return newJQuery(j)
	}
	
	
	// WrapInner Wrap an HTML structure around the content of each element in the set of matched elements.
	//
	// see http://api.jquery.com/wrapInner
	//
	func (x JQuery) WrapInner(i ...interface{}) JQuery {
		j:=x.Call("wrapInner", i...)
		return newJQuery(j)
	}
	
	

type Event struct {
	*js.Object
	
	CurrentTarget *js.Object `js:"currentTarget"`
	Data *js.Object `js:"data"`
	DelegateTarget *js.Object `js:"delegateTarget"`
	MetaKey bool `js:"metaKey"`
	Namespace string `js:"namespace"`
	PageX float64 `js:"pageX"`
	PageY float64 `js:"pageY"`
	RelatedTarget *js.Object `js:"relatedTarget"`
	Result *js.Object `js:"result"`
	Target *js.Object `js:"target"`
	TimeStamp float64 `js:"timeStamp"`
	Type string `js:"type"`
	Which float64 `js:"which"`
}

func newEvent(j *js.Object) Event {return Event{Object: j} }

	
	// IsDefaultPrevented Returns whether  was ever called on this event object. 
	//
	// see http://api.jquery.com/event.isDefaultPrevented
	//
	func (x Event) IsDefaultPrevented(i ...interface{}) bool {
		j:=x.Call("isDefaultPrevented", i...)
		return j.Bool()
	}
	
	
	// IsImmediatePropagationStopped   Returns whether event.stopImmediatePropagation() was ever called on this event object. 
	//
	// see http://api.jquery.com/event.isImmediatePropagationStopped
	//
	func (x Event) IsImmediatePropagationStopped(i ...interface{}) bool {
		j:=x.Call("isImmediatePropagationStopped", i...)
		return j.Bool()
	}
	
	
	// IsPropagationStopped   Returns whether  was ever called on this event object. 
	//
	// see http://api.jquery.com/event.isPropagationStopped
	//
	func (x Event) IsPropagationStopped(i ...interface{}) bool {
		j:=x.Call("isPropagationStopped", i...)
		return j.Bool()
	}
	
	
	// PreventDefault If this method is called, the default action of the event will not be triggered.
	//
	// see http://api.jquery.com/event.preventDefault
	//
	func (x Event) PreventDefault(i ...interface{})  {x.Call("preventDefault", i...)}
	
	
	// StopImmediatePropagation Keeps the rest of the handlers from being executed and prevents the event from bubbling up the DOM tree.
	//
	// see http://api.jquery.com/event.stopImmediatePropagation
	//
	func (x Event) StopImmediatePropagation(i ...interface{})  {x.Call("stopImmediatePropagation", i...)}
	
	
	// StopPropagation Prevents the event from bubbling up the DOM tree, preventing any parent handlers from being notified of the event.
	//
	// see http://api.jquery.com/event.stopPropagation
	//
	func (x Event) StopPropagation(i ...interface{})  {x.Call("stopPropagation", i...)}
	
	

type Deferred struct {
	*js.Object
	
}

func newDeferred(j *js.Object) Deferred {return Deferred{Object: j} }

	
	// Always  Add handlers to be called when the Deferred object is either resolved or rejected. 
	//
	// see http://api.jquery.com/deferred.always
	//
	func (x Deferred) Always(i ...interface{}) Deferred {
		j:=x.Call("always", i...)
		return newDeferred(j)
	}
	
	
	// Done  Add handlers to be called when the Deferred object is resolved. 
	//
	// see http://api.jquery.com/deferred.done
	//
	func (x Deferred) Done(i ...interface{}) Deferred {
		j:=x.Call("done", i...)
		return newDeferred(j)
	}
	
	
	// Fail  Add handlers to be called when the Deferred object is rejected. 
	//
	// see http://api.jquery.com/deferred.fail
	//
	func (x Deferred) Fail(i ...interface{}) Deferred {
		j:=x.Call("fail", i...)
		return newDeferred(j)
	}
	
	
	// IsRejected  Determine whether a Deferred object has been rejected. 
	//
	// see http://api.jquery.com/deferred.isRejected
	//
	func (x Deferred) IsRejected(i ...interface{}) bool {
		j:=x.Call("isRejected", i...)
		return j.Bool()
	}
	
	
	// IsResolved  Determine whether a Deferred object has been resolved. 
	//
	// see http://api.jquery.com/deferred.isResolved
	//
	func (x Deferred) IsResolved(i ...interface{}) bool {
		j:=x.Call("isResolved", i...)
		return j.Bool()
	}
	
	
	// Notify  Call the progressCallbacks on a Deferred object with the given . 
	//
	// see http://api.jquery.com/deferred.notify
	//
	func (x Deferred) Notify(i ...interface{}) Deferred {
		j:=x.Call("notify", i...)
		return newDeferred(j)
	}
	
	
	// NotifyWith  Call the progressCallbacks on a Deferred object with the given context and . 
	//
	// see http://api.jquery.com/deferred.notifyWith
	//
	func (x Deferred) NotifyWith(i ...interface{}) Deferred {
		j:=x.Call("notifyWith", i...)
		return newDeferred(j)
	}
	
	
	// Pipe  Utility method to filter and/or chain Deferreds.  
	//
	// see http://api.jquery.com/deferred.pipe
	//
	func (x Deferred) Pipe(i ...interface{}) *js.Object {
		j:=x.Call("pipe", i...)
		return j
	}
	
	
	// Progress  Add handlers to be called when the Deferred object generates progress notifications.
	//
	// see http://api.jquery.com/deferred.progress
	//
	func (x Deferred) Progress(i ...interface{}) Deferred {
		j:=x.Call("progress", i...)
		return newDeferred(j)
	}
	
	
	// Promise  Return a Deferred's Promise object. 
	//
	// see http://api.jquery.com/deferred.promise
	//
	func (x Deferred) Promise(i ...interface{}) *js.Object {
		j:=x.Call("promise", i...)
		return j
	}
	
	
	// Reject  Reject a Deferred object and call any failCallbacks with the given . 
	//
	// see http://api.jquery.com/deferred.reject
	//
	func (x Deferred) Reject(i ...interface{}) Deferred {
		j:=x.Call("reject", i...)
		return newDeferred(j)
	}
	
	
	// RejectWith  Reject a Deferred object and call any failCallbacks with the given  and . 
	//
	// see http://api.jquery.com/deferred.rejectWith
	//
	func (x Deferred) RejectWith(i ...interface{}) Deferred {
		j:=x.Call("rejectWith", i...)
		return newDeferred(j)
	}
	
	
	// Resolve  Resolve a Deferred object and call any doneCallbacks with the given . 
	//
	// see http://api.jquery.com/deferred.resolve
	//
	func (x Deferred) Resolve(i ...interface{}) Deferred {
		j:=x.Call("resolve", i...)
		return newDeferred(j)
	}
	
	
	// ResolveWith  Resolve a Deferred object and call any doneCallbacks with the given  and . 
	//
	// see http://api.jquery.com/deferred.resolveWith
	//
	func (x Deferred) ResolveWith(i ...interface{}) Deferred {
		j:=x.Call("resolveWith", i...)
		return newDeferred(j)
	}
	
	
	// State Determine the current state of a Deferred object. 
	//
	// see http://api.jquery.com/deferred.state
	//
	func (x Deferred) State(i ...interface{}) string {
		j:=x.Call("state", i...)
		return j.String()
	}
	
	
	// Then Add handlers to be called when the Deferred object is resolved, rejected, or still in progress. 
	//
	// see http://api.jquery.com/deferred.then
	//
	func (x Deferred) Then(i ...interface{}) *js.Object {
		j:=x.Call("then", i...)
		return j
	}
	
	
